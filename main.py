import asyncio
from contextlib import suppress
import schedule
import pandas as pd
import xlsxwriter
import pyodbc
from config import BOT_TOKEN
import sqlite3
import logging
import datetime
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram import types
from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,
                                      MessageToDeleteNotFound)
import markups as nav

from xlsxwriter.workbook import Workbook

workbook = Workbook('output_users.xlsx')
worksheet = workbook.add_worksheet()

workbook1 = Workbook('output_meetings.xlsx')
worksheet1 = workbook1.add_worksheet()

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# States
class Form(StatesGroup):
    name = State()
    city = State()
    work = State()
    link = State()
    hobby = State()


class Check(StatesGroup):
    date = State()


users_list = []


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é\n–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."
        "–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ—á–∏—Ç–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. ", reply_markup=nav.create)


# You can use state '*' if you need to handle all states
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=['create'])
async def process_prof(message: types.Message):
    await Form.name.set()
    await bot.send_message(message.from_user.id, "‚òïÔ∏è–ù–∞–ø–∏—à–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é ")


@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await Form.next()
    await message.reply("üè¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏ –Ω–∞–∂–º–∏ \n–û—Ç–ø—Ä–∞–≤–∏—Ç—å")


@dp.message_handler(state=Form.city)
async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    # Update state and data
    await Form.next()
    await message.reply("üë©‚Äçüíª –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å/—Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏\n–ü—Ä–∏–º–µ—Ä: –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤")


@dp.message_handler(state=Form.work)
async def process_work(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['work'] = message.text
    await Form.next()
    await message.reply("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å")


@dp.message_handler(state=Form.link)
async def process_link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['link'] = message.text
    await Form.next()
    await message.reply("ü¶Ñ –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö")


@dp.message_handler(state=Form.hobby)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['hobby'] = message.text
        username = message.from_user.username
        try:
            conn = sqlite3.connect("coffee_random.db")
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO `users` (`full_name`, `city`, `work`, `hobby`, `username`, `tg_username`) VALUES (?, ?, ?, ?, ?, ?)",
                (data['name'],
                 data['city'],
                 data['work'],
                 data['hobby'],
                 data['link'],
                 str(username)
                 ))
            await bot.send_message(
                message.chat.id,
                md.text(
                    md.text('–°—É–ø–µ—Ä! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n–ò–º—è:'
                            , md.code(data['name'])),
                    md.text('–ì–æ—Ä–æ–¥:', md.code(data['city'])),
                    md.text('–ó–∞–Ω—è—Ç–∏–µ:', data['work']),
                    md.text('–û —Å–µ–±–µ:', md.code(data['hobby'])),

                    sep='\n',
                ), reply_markup=nav.mainMenu)
            conn.commit()


        except ValueError:
            await message.reply("smth wrong")

        finally:
            if (conn):
                conn.close()

        await state.finish()


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ':
        try:
            conn = sqlite3.connect("coffee_random.db")
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM `users` ORDER BY RANDOM() LIMIT 1")
            result = cursor.fetchall()
            for row in result:
                id1 = row[0]
                name = row[1]
                city = row[2]
                work = row[3]
                hobby = row[4]
                link = row[5]
                tg = row[6]

            await bot.send_message(
                message.chat.id,
                md.text(
                    md.text('–Ø –Ω–∞—à–µ–ª —Ç–µ–±–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞. –≠—Ç–æ ', name,
                            '\n–ì–æ—Ä–æ–¥: ', city,
                            '\n–ó–∞–Ω—è—Ç–∏–µ:', work,
                            '\n–û —Å–µ–±–µ:', hobby,
                            '\n–í–æ—Ç –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º:', tg,
                            '\n\n–ù–∞–ø–∏—à–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫—É, –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞.'
                            '\n–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–∫–æ–≤–æ—Ä–∫–∏–Ω–≥üíª –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –∫–æ—Ñ–µ –±—Ä–µ–π–∫‚òï'
                            ),
                    sep='\n',
                ), reply_markup=nav.confirm
            )
            cursor.execute("SELECT * FROM `users` WHERE `tg_username`=?", [message.from_user.username], )
            user1 = cursor.fetchall()
            for row1 in user1:
                id0 = row1[0]

            users_list.clear()
            users_list.append(id0)
            users_list.append(id1)
            conn.commit()
            conn.close()

            try:
                timer_seconds = 10
                if timer_seconds <= 0:
                    raise ValueError()
            except (TypeError, ValueError):
                await bot.send_message(chat_id=message.chat.id, text='timer wrong')

            for seconds_left in range(timer_seconds - 1, 0, -1):
                await asyncio.sleep(1)

                if seconds_left == 1:
                    await bot.send_message(chat_id=message.chat.id,
                                           text=f'üëãüèª–ü—Ä–∏–≤–µ—Ç!\n–ü–æ–º–Ω–∏—à—å, —è –¥–∞–≤–∞–ª —Ç–µ–±–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞?',
                                           reply_markup=nav.yes_no)
        except:
            await message.reply('smth wrong')
    elif message.text == '–ü–æ–µ—Ö–∞–ª–∏!':
        await message.reply('–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π, –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ —Å—Ä–∞–∑—ÉüôÇ', reply_markup=types.ReplyKeyboardRemove())
    elif message.text == '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
        conn = sqlite3.connect("coffee_random.db")
        cursor = conn.cursor()
        cursor.row_factory = lambda cursor, row: row[6]
        cursor.execute("SELECT * FROM `users` WHERE `tg_username`=?", [message.from_user.username], )
        result = cursor.fetchall()
        conn.commit()
        conn.close()

        if not result:
            await Form.name.set()
            await message.reply("‚òïÔ∏è–ù–∞–ø–∏—à–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é ", reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞! ", reply_markup=nav.mainMenu)

    elif message.text == '–ù–µ—Ç, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å':
        connection = sqlite3.connect("coffee_random.db")
        cursor = connection.cursor()
        cursor.execute("INSERT INTO `meetings` (`user1`,`user2`,`meeted`) VALUES(?,?,?)",
                       (users_list.pop(), users_list.pop(), False))
        connection.commit()
        connection.close()
        await message.reply(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=types.ReplyKeyboardRemove())
    elif message.text == '–î–∞, –º—ã —Å–≤—è–∑–∞–ª–∏—Å—å':
        connection = sqlite3.connect("coffee_random.db")
        cursor = connection.cursor()
        cursor.execute("INSERT INTO `meetings` (`user1`,`user2`,`meeted`) VALUES(?,?,?)",
                       (users_list[0], users_list[1], True))
        connection.commit()
        connection.close()
        await message.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', reply_markup=types.ReplyKeyboardRemove())


if __name__ == '__main__':
    executor.start_polling(dp)
    conn = sqlite3.connect('coffee_random.db')
    c = conn.cursor()
    c.execute("select * from users")
    mysel = c.execute("select * from users ")
    for i, row in enumerate(mysel):
        for j, value in enumerate(row):
            worksheet.write(i, j, value)
    workbook.close()


    c.execute("select * from meetings")
    mysel = c.execute("select * from meetings ")
    for i, row in enumerate(mysel):
        for j, value in enumerate(row):
            worksheet1.write(i, j, value)
    workbook1.close()

